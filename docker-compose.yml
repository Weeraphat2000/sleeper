version: '3.8' # ระบุเวอร์ชันของ docker-compose (อาจเป็น 3 หรือ 3.8 เป็นต้น)

services:
  reservations:
    # ส่วนกำหนดวิธีการ build container สำหรับ service ชื่อ "reservations"
    build:
      context: . # ระบุ context สำหรับการ build เป็นโฟลเดอร์ปัจจุบัน
      dockerfile: ./apps/reservations/Dockerfile # ระบุไฟล์ Dockerfile ที่อยู่ในโฟลเดอร์ apps/reservations
      target: development # ระบุให้ใช้ stage "development" จาก multi-stage build ใน Dockerfile
    restart: always # กำหนดให้ container รันอัตโนมัติเมื่อเกิดข้อผิดพลาด
    command: pnpm run start:dev servervations # คำสั่งที่จะรันแทนค่า CMD ปกติ (เช่น start dev server)
    ports:
      - '3000:3000' # แมปพอร์ต 3000 ภายใน container ออกมาที่พอร์ต 3000 บนเครื่องโฮสต์
    volumes:
      - .:/usr/src/app # แมปโฟลเดอร์ปัจจุบันเข้าไปใน container ที่เก็บโค้ดของ reservations
    depends_on:
      - db # ให้ container reservations ขึ้นหลังจาก db ขึ้นแล้ว
    # environment:
    #   - MONGODB_URI=mongodb://db:27017/sleeper # ตัวแปร environment ชี้ไปยัง service db (ภายใน network ของ docker-compose)
    env_file:
      - ./apps/reservations/.env # ระบุไฟล์ .env ที่อยู่ในโฟลเดอร์ apps/reservations คือ จะดึงค่าในไฟล์ .env(./apps/reservations/.env) มาใช้เป็น environment

  auth:
    # ส่วนกำหนดวิธีการ build container สำหรับ service ชื่อ "auth"
    build:
      context: . # ระบุ context สำหรับการ build เป็นโฟลเดอร์ปัจจุบัน
      dockerfile: ./apps/auth/Dockerfile # ระบุไฟล์ Dockerfile ที่อยู่ในโฟลเดอร์ apps/auth
      target: development # ระบุให้ใช้ stage "development" จาก multi-stage build ใน Dockerfile
    command: pnpm run start:dev auth # คำสั่งที่จะรันแทนค่า CMD ปกติ (เช่น start dev auth)
    ports:
      - '3001:3001' # แมปพอร์ต 3001 ภายใน container ออกมาที่พอร์ต 3001 บนเครื่องโฮสต์
    volumes:
      - .:/usr/src/app # แมปโฟลเดอร์ปัจจุบันเข้าไปใน container ที่เก็บโค้ดของ auth
    depends_on:
      - db # ให้ container auth ขึ้นหลังจาก db ขึ้นแล้ว
    # environment:
    #   - MONGODB_URI=mongodb://db:27017/sleeper # ตัวแปร environment ชี้ไปยัง service db (ภายใน network ของ docker-compose)
    #   - JWT_SECRET=secret # ตัวแปร environment สำหรับเก็บค่า JWT_SECRET
    #   - JWT_EXPIRATION=1d # ตัวแปร environment สำหรับเก็บค่า JWT_EXPIRATION
    env_file:
      - ./apps/auth/.env # ระบุไฟล์ .env ที่อยู่ในโฟลเดอร์ apps/auth คือ จะดึงค่าในไฟล์ .env(./apps/auth/.env) มาใช้เป็น environment

  payments:
    # ส่วนกำหนดวิธีการ build container สำหรับ service ชื่อ "payments"
    build:
      context: . # ระบุ context สำหรับการ build เป็นโฟลเดอร์ปัจจุบัน
      dockerfile: ./apps/payments/Dockerfile # ระบุไฟล์ Dockerfile ที่อยู่ในโฟลเดอร์ apps/payments
      target: development # ระบุให้ใช้ stage "development" จาก multi-stage build ใน Dockerfile
    command: pnpm run start:dev payments # คำสั่งที่จะรันแทนค่า CMD ปกติ (เช่น start dev payments)
    volumes:
      - .:/usr/src/app # แมปโฟลเดอร์ปัจจุบันเข้าไปใน container ที่เก็บโค้ดของ payments
    depends_on:
      - db # ให้ container payments ขึ้นหลังจาก db ขึ้นแล้ว
    # environment:
    #   - MONGODB_URI=mongodb://db:27017/sleeper # ตัวแปร environment ชี้ไปยัง service db (ภายใน network ของ docker-compose)
    env_file:
      - ./apps/payments/.env # ระบุไฟล์ .env ที่อยู่ในโฟลเดอร์ apps/payments คือ จะดึงค่าในไฟล์ .env(./apps/payments/.env) มา

  notifications:
    # ส่วนกำหนดวิธีการ build container สำหรับ service ชื่อ "notifications"
    build:
      context: . # ระบุ context สำหรับการ build เป็นโฟลเดอร์ปัจจุบัน
      dockerfile: ./apps/notifications/Dockerfile # ระบุไฟล์ Dockerfile ที่อยู่ในโฟลเดอร์ apps/notifications
      target: development # ระบุให้ใช้ stage "development" จาก multi-stage build ใน Dockerfile
    command: pnpm run start:dev notifications # คำสั่งที่จะรันแทนค่า CMD ปกติ (เช่น start dev notifications)
    volumes:
      - .:/usr/src/app # แมปโฟลเดอร์ปัจจุบันเข้าไปใน container ที่เก็บโค้ดของ notifications
    depends_on:
      - db # ให้ container notifications ขึ้นหลังจาก db ขึ้นแล้ว
    env_file:
      - ./apps/notifications/.env # ระบุไฟล์ .env ที่อยู่ในโฟลเดอร์ apps/notifications คือ จะดึงค่าในไฟล์ .env(./apps/notifications/.env) มา

  db:
    # ส่วนกำหนด service ชื่อ "db" โดยใช้ภาพ (image) MongoDB จาก Docker Hub
    image: mongo
    ports:
      - '27019:27017' # แมปพอร์ต 27017 ภายใน container (MongoDB ปกติ) ออกมาที่พอร์ต 27019 บนเครื่องโฮสต์
    volumes: # กำหนด volume สำหรับเก็บข้อมูลฐานข้อมูล
      - db:/data/db # อ้างอิง volume ชื่อ db ที่กำหนดไว้ใน global

volumes:
  db: # กำหนด volume ชื่อ db สำหรับใช้งาน
