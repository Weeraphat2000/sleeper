###############################################################
# ใช้ base image ชื่อ node:alpine และตั้งชื่อ stage นี้ว่า development 
# โดย stage นี้จะใช้สำหรับกระบวนการพัฒนาหรือ build application
###############################################################
FROM node:alpine As development

###############################################################
# กำหนดโฟลเดอร์ทำงาน (Working Directory) ภายใน Container 
# ให้เป็น /usr/src/app
###############################################################
WORKDIR /usr/src/app

###############################################################
# คัดลอกไฟล์ package.json มาไว้ในโฟลเดอร์ทำงาน 
# รวมถึง pnpm-lock.yaml และ tsconfig.json
# ไฟล์เหล่านี้จำเป็นสำหรับติดตั้ง dependencies และตั้งค่า TypeScript
###############################################################
COPY package.json ./
COPY pnpm-lock.yaml ./
COPY tsconfig.json ./tsconfig.json
COPY nest-cli.json ./nest-cli.json
COPY apps/auth/prisma ./prisma

###############################################################
# ติดตั้ง pnpm ทั่วทั้งระบบ (Global) เพื่อให้ใช้ pnpm ได้จาก command line
###############################################################
RUN npm install -g pnpm

###############################################################
# คัดลอกโฟลเดอร์ apps/auth มายัง /usr/src/app/apps/auth 
# และคัดลอกโฟลเดอร์ libs มายัง /usr/src/app/libs 
# เพื่อให้โค้ดทั้งหมดพร้อมสำหรับการ build
###############################################################
COPY apps/auth ./apps/auth
COPY libs ./libs

###############################################################
# รัืนคำสั่ง pnpm install เพื่อติดตั้ง dependencies ทั้งหมด
# ที่ระบุในไฟล์ package.json และ pnpm-lock.yaml
###############################################################
# RUN pnpm install -r

###############################################################
# เข้าไปในโฟลเดอร์ apps/auth แล้วรันคำสั่ง pnpm install ซ้ำอีกครั้ง 
# (กรณีที่ภายใน /apps/auth มีไฟล์ package.json และ dependencies เพิ่มเติม)
###############################################################
RUN pnpm install
RUN pnpm prisma generate
RUN cd apps/auth && pnpm install

###############################################################
# รันคำสั่ง pnpm run build เพื่อ compile หรือ build โค้ด TypeScript 
# ให้กลายเป็นไฟล์ JavaScript (ผลลัพธ์จะอยู่ใน dist)
###############################################################
RUN pnpm run build auth

###############################################################
# เริ่มต้น Stage ใหม่ ชื่อ production โดยใช้ base image node:alpine
# สำหรับเอาไฟล์ที่ build เสร็จแล้วมาใช้ใน Production
###############################################################
FROM node:alpine As production

###############################################################
# กำหนดค่า ARG NODE_ENV=production และตั้งค่า ENV NODE_ENV เป็น production
# เพื่อบอกให้ Container นี้รันในโหมด production
###############################################################
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

###############################################################
# กำหนดโฟลเดอร์ทำงานใน Container เป็น /usr/src/app
###############################################################
WORKDIR /usr/src/app

###############################################################
# คัดลอกไฟล์ package.json และ pnpm-lock.yaml มาไว้ในโฟลเดอร์ทำงาน 
# เพื่อเตรียมติดตั้ง dependencies ที่จำเป็นสำหรับ Production
###############################################################
COPY package.json ./
COPY pnpm-lock.yaml ./

###############################################################
# ติดตั้ง pnpm แบบ Global อีกครั้งใน Stage นี้ 
###############################################################
RUN npm install -g pnpm

###############################################################
# ติดตั้ง dependencies เฉพาะที่จำเป็นใน Production (–prod)
###############################################################
RUN pnpm install --prod

###############################################################
# คัดลอกไฟล์จาก Stage "development" ที่ path /usr/src/app/dist 
# มาไว้ใน /usr/src/app/dist ของ Stage production 
# ไฟล์ใน dist คือไฟล์ที่ build เสร็จแล้ว 
###############################################################
COPY --from=development /usr/src/app/dist ./dist

###############################################################
# คำสั่งสุดท้ายที่บอก Docker ให้รัน Node โดยใช้ไฟล์ main.js ภายใต้ 
# dist/apps/auth/main.js เมื่อ Container เริ่มทำงาน
###############################################################
CMD ["pnpm", "run", "start:prod", "dist/apps/auth/main.js"]
